// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

edition = "2023";

package routeguide;

import "weather/weather.proto";

option features.field_presence = IMPLICIT;
option go_package = "google.golang.org/grpc/examples/route_guide/routeguide";
option java_multiple_files = true;
option java_outer_classname = "RouteGuideProto";
option java_package = "io.grpc.examples.routeguide";

// RouteGuideService
service RouteGuideService {
  // GetFeature
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(Point) returns (Feature) {}

  // ListFeatures
  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // RecordRoute
  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // RouteChat
  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Point
// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  // latitude
  int32 latitude = 1;
  // longitude
  int32 longitude = 2;
  // location
  weather.Location location = 3;
}

// Rectangle
// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi".
message Rectangle {
  // lo
  // One corner of the rectangle.
  Point lo = 1;

  // hi
  // The other corner of the rectangle.
  Point hi = 2;
}

// Feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // name of the feature.
  string name = 1;

  // location is the point where the feature is detected.
  Point location = 2;
}

// RouteNote is a message sent while at a given point.
message RouteNote {
  // location from which the message is sent.
  Point location = 1;

  // message to be sent.
  string message = 2;
}

// RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
message RouteSummary {
  // point_count
  // The number of points received.
  int32 point_count = 1;

  // feature_count
  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // distance
  // The distance covered in metres.
  int32 distance = 3;

  // elapsed_time
  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
